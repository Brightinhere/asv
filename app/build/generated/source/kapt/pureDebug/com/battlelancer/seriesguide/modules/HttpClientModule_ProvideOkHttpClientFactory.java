// Generated by Dagger (https://dagger.dev).
package com.battlelancer.seriesguide.modules;

import com.battlelancer.seriesguide.tmdbapi.SgTmdbInterceptor;
import com.battlelancer.seriesguide.traktapi.SgTraktInterceptor;
import com.battlelancer.seriesguide.util.AllApisAuthenticator;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class HttpClientModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final HttpClientModule module;

  private final Provider<Cache> cacheProvider;

  private final Provider<SgTraktInterceptor> traktInterceptorProvider;

  private final Provider<SgTmdbInterceptor> tmdbInterceptorProvider;

  private final Provider<AllApisAuthenticator> authenticatorProvider;

  public HttpClientModule_ProvideOkHttpClientFactory(HttpClientModule module,
      Provider<Cache> cacheProvider, Provider<SgTraktInterceptor> traktInterceptorProvider,
      Provider<SgTmdbInterceptor> tmdbInterceptorProvider,
      Provider<AllApisAuthenticator> authenticatorProvider) {
    this.module = module;
    this.cacheProvider = cacheProvider;
    this.traktInterceptorProvider = traktInterceptorProvider;
    this.tmdbInterceptorProvider = tmdbInterceptorProvider;
    this.authenticatorProvider = authenticatorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(module, cacheProvider.get(), traktInterceptorProvider.get(), tmdbInterceptorProvider.get(), authenticatorProvider.get());
  }

  public static HttpClientModule_ProvideOkHttpClientFactory create(HttpClientModule module,
      Provider<Cache> cacheProvider, Provider<SgTraktInterceptor> traktInterceptorProvider,
      Provider<SgTmdbInterceptor> tmdbInterceptorProvider,
      Provider<AllApisAuthenticator> authenticatorProvider) {
    return new HttpClientModule_ProvideOkHttpClientFactory(module, cacheProvider, traktInterceptorProvider, tmdbInterceptorProvider, authenticatorProvider);
  }

  public static OkHttpClient provideOkHttpClient(HttpClientModule instance, Cache cache,
      SgTraktInterceptor traktInterceptor, SgTmdbInterceptor tmdbInterceptor,
      AllApisAuthenticator authenticator) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkHttpClient(cache, traktInterceptor, tmdbInterceptor, authenticator));
  }
}
