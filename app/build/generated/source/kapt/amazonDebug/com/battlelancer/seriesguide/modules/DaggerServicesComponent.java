// Generated by Dagger (https://dagger.dev).
package com.battlelancer.seriesguide.modules;

import android.content.Context;
import com.battlelancer.seriesguide.backend.HexagonTools;
import com.battlelancer.seriesguide.backend.HexagonTools_Factory;
import com.battlelancer.seriesguide.comments.TraktCommentsLoader;
import com.battlelancer.seriesguide.comments.TraktCommentsLoader_MembersInjector;
import com.battlelancer.seriesguide.movies.tools.MovieTools;
import com.battlelancer.seriesguide.movies.tools.MovieTools_Factory;
import com.battlelancer.seriesguide.shows.search.discover.TraktAddLoader;
import com.battlelancer.seriesguide.shows.tools.AddShowTask;
import com.battlelancer.seriesguide.shows.tools.AddUpdateShowTools;
import com.battlelancer.seriesguide.shows.tools.GetShowTools;
import com.battlelancer.seriesguide.shows.tools.ShowTools2;
import com.battlelancer.seriesguide.shows.tools.ShowTools2_Factory;
import com.battlelancer.seriesguide.sync.HexagonShowSync;
import com.battlelancer.seriesguide.sync.HexagonShowSync_Factory;
import com.battlelancer.seriesguide.sync.SgSyncAdapter;
import com.battlelancer.seriesguide.sync.SgSyncAdapter_MembersInjector;
import com.battlelancer.seriesguide.tmdbapi.SgTmdbInterceptor;
import com.battlelancer.seriesguide.tmdbapi.SgTmdbInterceptor_Factory;
import com.battlelancer.seriesguide.traktapi.SgTraktInterceptor;
import com.battlelancer.seriesguide.traktapi.SgTraktInterceptor_Factory;
import com.battlelancer.seriesguide.util.AllApisAuthenticator;
import com.battlelancer.seriesguide.util.AllApisAuthenticator_Factory;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.uwetrottmann.tmdb2.Tmdb;
import com.uwetrottmann.tmdb2.services.ConfigurationService;
import com.uwetrottmann.tmdb2.services.MoviesService;
import com.uwetrottmann.tmdb2.services.PeopleService;
import com.uwetrottmann.trakt5.TraktV2;
import com.uwetrottmann.trakt5.services.Sync;
import com.uwetrottmann.trakt5.services.Users;
import dagger.internal.DaggerGenerated;
import dagger.internal.DelegateFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerServicesComponent implements ServicesComponent {
  private final AppModule appModule;

  private final DaggerServicesComponent servicesComponent = this;

  private Provider<Context> provideApplicationContextProvider;

  private Provider<HexagonTools> hexagonToolsProvider;

  private Provider<Cache> provideOkHttpCacheProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<TraktV2> provideTraktProvider;

  private Provider<SgTraktInterceptor> sgTraktInterceptorProvider;

  private Provider<Tmdb> provideSgTmdbProvider;

  private Provider<SgTmdbInterceptor> sgTmdbInterceptorProvider;

  private Provider<AllApisAuthenticator> allApisAuthenticatorProvider;

  private Provider<MoviesService> provideMovieServiceProvider;

  private Provider<PeopleService> providePeopleServiceProvider;

  private Provider<HexagonShowSync> hexagonShowSyncProvider;

  private Provider<ShowTools2> showTools2Provider;

  private Provider<Sync> provideSyncProvider;

  private Provider<Users> provideUsersProvider;

  private Provider<MovieTools> movieToolsProvider;

  private Provider<ConfigurationService> provideConfigurationServiceProvider;

  private DaggerServicesComponent(AppModule appModuleParam, HttpClientModule httpClientModuleParam,
      TmdbModule tmdbModuleParam, TraktModule traktModuleParam) {
    this.appModule = appModuleParam;
    initialize(appModuleParam, httpClientModuleParam, tmdbModuleParam, traktModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam,
      final HttpClientModule httpClientModuleParam, final TmdbModule tmdbModuleParam,
      final TraktModule traktModuleParam) {
    this.provideApplicationContextProvider = AppModule_ProvideApplicationContextFactory.create(appModuleParam);
    this.hexagonToolsProvider = DoubleCheck.provider(HexagonTools_Factory.create(provideApplicationContextProvider));
    this.provideOkHttpCacheProvider = DoubleCheck.provider(HttpClientModule_ProvideOkHttpCacheFactory.create(httpClientModuleParam, provideApplicationContextProvider));
    this.provideOkHttpClientProvider = new DelegateFactory<>();
    this.provideTraktProvider = DoubleCheck.provider(TraktModule_ProvideTraktFactory.create(traktModuleParam, provideApplicationContextProvider, provideOkHttpClientProvider));
    this.sgTraktInterceptorProvider = SgTraktInterceptor_Factory.create(provideTraktProvider);
    this.provideSgTmdbProvider = new DelegateFactory<>();
    this.sgTmdbInterceptorProvider = SgTmdbInterceptor_Factory.create(provideSgTmdbProvider);
    this.allApisAuthenticatorProvider = AllApisAuthenticator_Factory.create(provideApplicationContextProvider, provideTraktProvider);
    DelegateFactory.setDelegate(provideOkHttpClientProvider, DoubleCheck.provider(HttpClientModule_ProvideOkHttpClientFactory.create(httpClientModuleParam, provideOkHttpCacheProvider, sgTraktInterceptorProvider, sgTmdbInterceptorProvider, allApisAuthenticatorProvider)));
    DelegateFactory.setDelegate(provideSgTmdbProvider, DoubleCheck.provider(TmdbModule_ProvideSgTmdbFactory.create(tmdbModuleParam, provideOkHttpClientProvider)));
    this.provideMovieServiceProvider = DoubleCheck.provider(TmdbModule_ProvideMovieServiceFactory.create(tmdbModuleParam, provideSgTmdbProvider));
    this.providePeopleServiceProvider = DoubleCheck.provider(TmdbModule_ProvidePeopleServiceFactory.create(tmdbModuleParam, provideSgTmdbProvider));
    this.hexagonShowSyncProvider = HexagonShowSync_Factory.create(provideApplicationContextProvider, hexagonToolsProvider);
    this.showTools2Provider = ShowTools2_Factory.create(provideApplicationContextProvider, hexagonShowSyncProvider);
    this.provideSyncProvider = DoubleCheck.provider(TraktModule_ProvideSyncFactory.create(traktModuleParam, provideTraktProvider));
    this.provideUsersProvider = DoubleCheck.provider(TraktModule_ProvideUsersFactory.create(traktModuleParam, provideTraktProvider));
    this.movieToolsProvider = MovieTools_Factory.create(provideApplicationContextProvider, provideMovieServiceProvider, provideTraktProvider);
    this.provideConfigurationServiceProvider = DoubleCheck.provider(TmdbModule_ProvideConfigurationServiceFactory.create(tmdbModuleParam, provideSgTmdbProvider));
  }

  @Override
  public HexagonTools hexagonTools() {
    return hexagonToolsProvider.get();
  }

  @Override
  public HexagonShowSync hexagonShowSync() {
    return new HexagonShowSync(AppModule_ProvideApplicationContextFactory.provideApplicationContext(appModule), hexagonToolsProvider.get());
  }

  @Override
  public MoviesService moviesService() {
    return provideMovieServiceProvider.get();
  }

  @Override
  public MovieTools movieTools() {
    return new MovieTools(AppModule_ProvideApplicationContextFactory.provideApplicationContext(appModule), DoubleCheck.lazy(provideMovieServiceProvider), DoubleCheck.lazy(provideTraktProvider));
  }

  @Override
  public PeopleService peopleService() {
    return providePeopleServiceProvider.get();
  }

  @Override
  public ShowTools2 showTools() {
    return new ShowTools2(AppModule_ProvideApplicationContextFactory.provideApplicationContext(appModule), DoubleCheck.lazy(hexagonShowSyncProvider));
  }

  @Override
  public AddUpdateShowTools addUpdateShowTools() {
    return new AddUpdateShowTools(AppModule_ProvideApplicationContextFactory.provideApplicationContext(appModule), getShowTools(), DoubleCheck.lazy(hexagonShowSyncProvider), DoubleCheck.lazy(hexagonToolsProvider), DoubleCheck.lazy(showTools2Provider));
  }

  @Override
  public GetShowTools getShowTools() {
    return new GetShowTools(AppModule_ProvideApplicationContextFactory.provideApplicationContext(appModule));
  }

  @Override
  public Tmdb tmdb() {
    return provideSgTmdbProvider.get();
  }

  @Override
  public TraktV2 trakt() {
    return provideTraktProvider.get();
  }

  @Override
  public Sync traktSync() {
    return provideSyncProvider.get();
  }

  @Override
  public Users traktUsers() {
    return provideUsersProvider.get();
  }

  @Override
  public void inject(AddShowTask addShowTask) {
  }

  @Override
  public void inject(SgSyncAdapter sgSyncAdapter) {
    injectSgSyncAdapter(sgSyncAdapter);
  }

  @Override
  public void inject(TraktAddLoader traktAddLoader) {
  }

  @Override
  public void inject(TraktCommentsLoader traktCommentsLoader) {
    injectTraktCommentsLoader(traktCommentsLoader);
  }

  @CanIgnoreReturnValue
  private SgSyncAdapter injectSgSyncAdapter(SgSyncAdapter instance) {
    SgSyncAdapter_MembersInjector.injectHexagonTools(instance, DoubleCheck.lazy(hexagonToolsProvider));
    SgSyncAdapter_MembersInjector.injectTraktSync(instance, DoubleCheck.lazy(provideSyncProvider));
    SgSyncAdapter_MembersInjector.injectMovieTools(instance, DoubleCheck.lazy(movieToolsProvider));
    SgSyncAdapter_MembersInjector.injectTmdbConfigService(instance, DoubleCheck.lazy(provideConfigurationServiceProvider));
    return instance;
  }

  @CanIgnoreReturnValue
  private TraktCommentsLoader injectTraktCommentsLoader(TraktCommentsLoader instance) {
    TraktCommentsLoader_MembersInjector.injectTrakt(instance, provideTraktProvider.get());
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private HttpClientModule httpClientModule;

    private TmdbModule tmdbModule;

    private TraktModule traktModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder httpClientModule(HttpClientModule httpClientModule) {
      this.httpClientModule = Preconditions.checkNotNull(httpClientModule);
      return this;
    }

    public Builder tmdbModule(TmdbModule tmdbModule) {
      this.tmdbModule = Preconditions.checkNotNull(tmdbModule);
      return this;
    }

    public Builder traktModule(TraktModule traktModule) {
      this.traktModule = Preconditions.checkNotNull(traktModule);
      return this;
    }

    public ServicesComponent build() {
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      if (httpClientModule == null) {
        this.httpClientModule = new HttpClientModule();
      }
      if (tmdbModule == null) {
        this.tmdbModule = new TmdbModule();
      }
      if (traktModule == null) {
        this.traktModule = new TraktModule();
      }
      return new DaggerServicesComponent(appModule, httpClientModule, tmdbModule, traktModule);
    }
  }
}
