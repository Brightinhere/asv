// Generated by Dagger (https://dagger.dev).
package com.battlelancer.seriesguide.modules;

import com.uwetrottmann.tmdb2.Tmdb;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TmdbModule_ProvideSgTmdbFactory implements Factory<Tmdb> {
  private final TmdbModule module;

  private final Provider<OkHttpClient> okHttpClientProvider;

  public TmdbModule_ProvideSgTmdbFactory(TmdbModule module,
      Provider<OkHttpClient> okHttpClientProvider) {
    this.module = module;
    this.okHttpClientProvider = okHttpClientProvider;
  }

  @Override
  public Tmdb get() {
    return provideSgTmdb(module, okHttpClientProvider.get());
  }

  public static TmdbModule_ProvideSgTmdbFactory create(TmdbModule module,
      Provider<OkHttpClient> okHttpClientProvider) {
    return new TmdbModule_ProvideSgTmdbFactory(module, okHttpClientProvider);
  }

  public static Tmdb provideSgTmdb(TmdbModule instance, OkHttpClient okHttpClient) {
    return Preconditions.checkNotNullFromProvides(instance.provideSgTmdb(okHttpClient));
  }
}
