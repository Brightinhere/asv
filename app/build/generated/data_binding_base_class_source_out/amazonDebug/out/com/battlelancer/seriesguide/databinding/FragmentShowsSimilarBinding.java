// Generated by view binder compiler. Do not edit!
package com.battlelancer.seriesguide.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.battlelancer.seriesguide.R;
import com.battlelancer.seriesguide.ui.widgets.EmptyView;
import com.uwetrottmann.seriesguide.widgets.EmptyViewSwipeRefreshLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentShowsSimilarBinding implements ViewBinding {
  @NonNull
  private final EmptyViewSwipeRefreshLayout rootView;

  @NonNull
  public final ConstraintLayout constraintLayoutShowsSimilar;

  @NonNull
  public final EmptyView emptyViewShowsSimilar;

  @NonNull
  public final RecyclerView recyclerViewShowsSimilar;

  @NonNull
  public final ScrollView scrollViewShowsSimilar;

  @NonNull
  public final EmptyViewSwipeRefreshLayout swipeRefreshLayoutShowsSimilar;

  private FragmentShowsSimilarBinding(@NonNull EmptyViewSwipeRefreshLayout rootView,
      @NonNull ConstraintLayout constraintLayoutShowsSimilar,
      @NonNull EmptyView emptyViewShowsSimilar, @NonNull RecyclerView recyclerViewShowsSimilar,
      @NonNull ScrollView scrollViewShowsSimilar,
      @NonNull EmptyViewSwipeRefreshLayout swipeRefreshLayoutShowsSimilar) {
    this.rootView = rootView;
    this.constraintLayoutShowsSimilar = constraintLayoutShowsSimilar;
    this.emptyViewShowsSimilar = emptyViewShowsSimilar;
    this.recyclerViewShowsSimilar = recyclerViewShowsSimilar;
    this.scrollViewShowsSimilar = scrollViewShowsSimilar;
    this.swipeRefreshLayoutShowsSimilar = swipeRefreshLayoutShowsSimilar;
  }

  @Override
  @NonNull
  public EmptyViewSwipeRefreshLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentShowsSimilarBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentShowsSimilarBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_shows_similar, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentShowsSimilarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.constraintLayoutShowsSimilar;
      ConstraintLayout constraintLayoutShowsSimilar = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayoutShowsSimilar == null) {
        break missingId;
      }

      id = R.id.emptyViewShowsSimilar;
      EmptyView emptyViewShowsSimilar = ViewBindings.findChildViewById(rootView, id);
      if (emptyViewShowsSimilar == null) {
        break missingId;
      }

      id = R.id.recyclerViewShowsSimilar;
      RecyclerView recyclerViewShowsSimilar = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewShowsSimilar == null) {
        break missingId;
      }

      id = R.id.scrollViewShowsSimilar;
      ScrollView scrollViewShowsSimilar = ViewBindings.findChildViewById(rootView, id);
      if (scrollViewShowsSimilar == null) {
        break missingId;
      }

      EmptyViewSwipeRefreshLayout swipeRefreshLayoutShowsSimilar = (EmptyViewSwipeRefreshLayout) rootView;

      return new FragmentShowsSimilarBinding((EmptyViewSwipeRefreshLayout) rootView,
          constraintLayoutShowsSimilar, emptyViewShowsSimilar, recyclerViewShowsSimilar,
          scrollViewShowsSimilar, swipeRefreshLayoutShowsSimilar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
