// Generated by view binder compiler. Do not edit!
package com.battlelancer.seriesguide.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.battlelancer.seriesguide.R;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutEpisodeBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ConstraintLayout constraintLayoutEpisodeImage;

  @NonNull
  public final MaterialCardView containerImage;

  @NonNull
  public final ImageView imageviewScreenshot;

  @NonNull
  public final ButtonsEpisodeBinding includeButtons;

  @NonNull
  public final RatingsShowsBinding includeRatings;

  @NonNull
  public final ButtonsServicesBinding includeServices;

  @NonNull
  public final TextView textViewEpisodeNotMigrated;

  @NonNull
  public final TextView textviewDescription;

  @NonNull
  public final TextView textviewDirectors;

  @NonNull
  public final TextView textviewDirectorsLabel;

  @NonNull
  public final TextView textviewDvd;

  @NonNull
  public final TextView textviewDvdLabel;

  @NonNull
  public final TextView textviewGuestStars;

  @NonNull
  public final TextView textviewGuestStarsLabel;

  @NonNull
  public final TextView textviewReleaseDate;

  @NonNull
  public final TextView textviewReleaseDateLabel;

  @NonNull
  public final TextView textviewReleaseTime;

  @NonNull
  public final TextView textviewTitle;

  @NonNull
  public final TextView textviewWriters;

  @NonNull
  public final TextView textviewWritersLabel;

  private LayoutEpisodeBinding(@NonNull LinearLayout rootView,
      @NonNull ConstraintLayout constraintLayoutEpisodeImage,
      @NonNull MaterialCardView containerImage, @NonNull ImageView imageviewScreenshot,
      @NonNull ButtonsEpisodeBinding includeButtons, @NonNull RatingsShowsBinding includeRatings,
      @NonNull ButtonsServicesBinding includeServices, @NonNull TextView textViewEpisodeNotMigrated,
      @NonNull TextView textviewDescription, @NonNull TextView textviewDirectors,
      @NonNull TextView textviewDirectorsLabel, @NonNull TextView textviewDvd,
      @NonNull TextView textviewDvdLabel, @NonNull TextView textviewGuestStars,
      @NonNull TextView textviewGuestStarsLabel, @NonNull TextView textviewReleaseDate,
      @NonNull TextView textviewReleaseDateLabel, @NonNull TextView textviewReleaseTime,
      @NonNull TextView textviewTitle, @NonNull TextView textviewWriters,
      @NonNull TextView textviewWritersLabel) {
    this.rootView = rootView;
    this.constraintLayoutEpisodeImage = constraintLayoutEpisodeImage;
    this.containerImage = containerImage;
    this.imageviewScreenshot = imageviewScreenshot;
    this.includeButtons = includeButtons;
    this.includeRatings = includeRatings;
    this.includeServices = includeServices;
    this.textViewEpisodeNotMigrated = textViewEpisodeNotMigrated;
    this.textviewDescription = textviewDescription;
    this.textviewDirectors = textviewDirectors;
    this.textviewDirectorsLabel = textviewDirectorsLabel;
    this.textviewDvd = textviewDvd;
    this.textviewDvdLabel = textviewDvdLabel;
    this.textviewGuestStars = textviewGuestStars;
    this.textviewGuestStarsLabel = textviewGuestStarsLabel;
    this.textviewReleaseDate = textviewReleaseDate;
    this.textviewReleaseDateLabel = textviewReleaseDateLabel;
    this.textviewReleaseTime = textviewReleaseTime;
    this.textviewTitle = textviewTitle;
    this.textviewWriters = textviewWriters;
    this.textviewWritersLabel = textviewWritersLabel;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutEpisodeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutEpisodeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_episode, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutEpisodeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.constraintLayoutEpisodeImage;
      ConstraintLayout constraintLayoutEpisodeImage = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayoutEpisodeImage == null) {
        break missingId;
      }

      id = R.id.containerImage;
      MaterialCardView containerImage = ViewBindings.findChildViewById(rootView, id);
      if (containerImage == null) {
        break missingId;
      }

      id = R.id.imageview_screenshot;
      ImageView imageviewScreenshot = ViewBindings.findChildViewById(rootView, id);
      if (imageviewScreenshot == null) {
        break missingId;
      }

      id = R.id.include_buttons;
      View includeButtons = ViewBindings.findChildViewById(rootView, id);
      if (includeButtons == null) {
        break missingId;
      }
      ButtonsEpisodeBinding binding_includeButtons = ButtonsEpisodeBinding.bind(includeButtons);

      id = R.id.include_ratings;
      View includeRatings = ViewBindings.findChildViewById(rootView, id);
      if (includeRatings == null) {
        break missingId;
      }
      RatingsShowsBinding binding_includeRatings = RatingsShowsBinding.bind(includeRatings);

      id = R.id.include_services;
      View includeServices = ViewBindings.findChildViewById(rootView, id);
      if (includeServices == null) {
        break missingId;
      }
      ButtonsServicesBinding binding_includeServices = ButtonsServicesBinding.bind(includeServices);

      id = R.id.textViewEpisodeNotMigrated;
      TextView textViewEpisodeNotMigrated = ViewBindings.findChildViewById(rootView, id);
      if (textViewEpisodeNotMigrated == null) {
        break missingId;
      }

      id = R.id.textview_description;
      TextView textviewDescription = ViewBindings.findChildViewById(rootView, id);
      if (textviewDescription == null) {
        break missingId;
      }

      id = R.id.textview_directors;
      TextView textviewDirectors = ViewBindings.findChildViewById(rootView, id);
      if (textviewDirectors == null) {
        break missingId;
      }

      id = R.id.textview_directors_label;
      TextView textviewDirectorsLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewDirectorsLabel == null) {
        break missingId;
      }

      id = R.id.textview_dvd;
      TextView textviewDvd = ViewBindings.findChildViewById(rootView, id);
      if (textviewDvd == null) {
        break missingId;
      }

      id = R.id.textview_dvd_label;
      TextView textviewDvdLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewDvdLabel == null) {
        break missingId;
      }

      id = R.id.textview_guest_stars;
      TextView textviewGuestStars = ViewBindings.findChildViewById(rootView, id);
      if (textviewGuestStars == null) {
        break missingId;
      }

      id = R.id.textview_guest_stars_label;
      TextView textviewGuestStarsLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewGuestStarsLabel == null) {
        break missingId;
      }

      id = R.id.textview_release_date;
      TextView textviewReleaseDate = ViewBindings.findChildViewById(rootView, id);
      if (textviewReleaseDate == null) {
        break missingId;
      }

      id = R.id.textview_release_date_label;
      TextView textviewReleaseDateLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewReleaseDateLabel == null) {
        break missingId;
      }

      id = R.id.textview_release_time;
      TextView textviewReleaseTime = ViewBindings.findChildViewById(rootView, id);
      if (textviewReleaseTime == null) {
        break missingId;
      }

      id = R.id.textview_title;
      TextView textviewTitle = ViewBindings.findChildViewById(rootView, id);
      if (textviewTitle == null) {
        break missingId;
      }

      id = R.id.textview_writers;
      TextView textviewWriters = ViewBindings.findChildViewById(rootView, id);
      if (textviewWriters == null) {
        break missingId;
      }

      id = R.id.textview_writers_label;
      TextView textviewWritersLabel = ViewBindings.findChildViewById(rootView, id);
      if (textviewWritersLabel == null) {
        break missingId;
      }

      return new LayoutEpisodeBinding((LinearLayout) rootView, constraintLayoutEpisodeImage,
          containerImage, imageviewScreenshot, binding_includeButtons, binding_includeRatings,
          binding_includeServices, textViewEpisodeNotMigrated, textviewDescription,
          textviewDirectors, textviewDirectorsLabel, textviewDvd, textviewDvdLabel,
          textviewGuestStars, textviewGuestStarsLabel, textviewReleaseDate,
          textviewReleaseDateLabel, textviewReleaseTime, textviewTitle, textviewWriters,
          textviewWritersLabel);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
