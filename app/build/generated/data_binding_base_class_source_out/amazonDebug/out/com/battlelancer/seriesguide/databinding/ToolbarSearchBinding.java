// Generated by view binder compiler. Do not edit!
package com.battlelancer.seriesguide.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.battlelancer.seriesguide.R;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ToolbarSearchBinding implements ViewBinding {
  @NonNull
  private final Toolbar rootView;

  @NonNull
  public final AutoCompleteTextView autoCompleteViewToolbar;

  @NonNull
  public final ConstraintLayout containerSearchBar;

  @NonNull
  public final Toolbar sgToolbar;

  @NonNull
  public final TextInputLayout textInputLayoutToolbar;

  private ToolbarSearchBinding(@NonNull Toolbar rootView,
      @NonNull AutoCompleteTextView autoCompleteViewToolbar,
      @NonNull ConstraintLayout containerSearchBar, @NonNull Toolbar sgToolbar,
      @NonNull TextInputLayout textInputLayoutToolbar) {
    this.rootView = rootView;
    this.autoCompleteViewToolbar = autoCompleteViewToolbar;
    this.containerSearchBar = containerSearchBar;
    this.sgToolbar = sgToolbar;
    this.textInputLayoutToolbar = textInputLayoutToolbar;
  }

  @Override
  @NonNull
  public Toolbar getRoot() {
    return rootView;
  }

  @NonNull
  public static ToolbarSearchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ToolbarSearchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.toolbar_search, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ToolbarSearchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.auto_complete_view_toolbar;
      AutoCompleteTextView autoCompleteViewToolbar = ViewBindings.findChildViewById(rootView, id);
      if (autoCompleteViewToolbar == null) {
        break missingId;
      }

      id = R.id.containerSearchBar;
      ConstraintLayout containerSearchBar = ViewBindings.findChildViewById(rootView, id);
      if (containerSearchBar == null) {
        break missingId;
      }

      Toolbar sgToolbar = (Toolbar) rootView;

      id = R.id.text_input_layout_toolbar;
      TextInputLayout textInputLayoutToolbar = ViewBindings.findChildViewById(rootView, id);
      if (textInputLayoutToolbar == null) {
        break missingId;
      }

      return new ToolbarSearchBinding((Toolbar) rootView, autoCompleteViewToolbar,
          containerSearchBar, sgToolbar, textInputLayoutToolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
