// Generated by view binder compiler. Do not edit!
package com.battlelancer.seriesguide.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.battlelancer.seriesguide.R;
import com.battlelancer.seriesguide.shows.episodes.WatchedBox;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemCalendarBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialCardView cardViewActivity;

  @NonNull
  public final ConstraintLayout constraintLayoutCalendar;

  @NonNull
  public final ImageView imageViewActivityCollected;

  @NonNull
  public final ImageView imageViewActivityPoster;

  @NonNull
  public final LinearLayout linearLayoutCalendar;

  @NonNull
  public final TextView textViewActivityEpisode;

  @NonNull
  public final TextView textViewActivityInfo;

  @NonNull
  public final TextView textViewActivityShow;

  @NonNull
  public final TextView textViewActivityTimestamp;

  @NonNull
  public final TextView textViewGridHeader;

  @NonNull
  public final WatchedBox watchedBoxActivity;

  private ItemCalendarBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialCardView cardViewActivity,
      @NonNull ConstraintLayout constraintLayoutCalendar,
      @NonNull ImageView imageViewActivityCollected, @NonNull ImageView imageViewActivityPoster,
      @NonNull LinearLayout linearLayoutCalendar, @NonNull TextView textViewActivityEpisode,
      @NonNull TextView textViewActivityInfo, @NonNull TextView textViewActivityShow,
      @NonNull TextView textViewActivityTimestamp, @NonNull TextView textViewGridHeader,
      @NonNull WatchedBox watchedBoxActivity) {
    this.rootView = rootView;
    this.cardViewActivity = cardViewActivity;
    this.constraintLayoutCalendar = constraintLayoutCalendar;
    this.imageViewActivityCollected = imageViewActivityCollected;
    this.imageViewActivityPoster = imageViewActivityPoster;
    this.linearLayoutCalendar = linearLayoutCalendar;
    this.textViewActivityEpisode = textViewActivityEpisode;
    this.textViewActivityInfo = textViewActivityInfo;
    this.textViewActivityShow = textViewActivityShow;
    this.textViewActivityTimestamp = textViewActivityTimestamp;
    this.textViewGridHeader = textViewGridHeader;
    this.watchedBoxActivity = watchedBoxActivity;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemCalendarBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemCalendarBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_calendar, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemCalendarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cardViewActivity;
      MaterialCardView cardViewActivity = ViewBindings.findChildViewById(rootView, id);
      if (cardViewActivity == null) {
        break missingId;
      }

      id = R.id.constraintLayoutCalendar;
      ConstraintLayout constraintLayoutCalendar = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayoutCalendar == null) {
        break missingId;
      }

      id = R.id.imageViewActivityCollected;
      ImageView imageViewActivityCollected = ViewBindings.findChildViewById(rootView, id);
      if (imageViewActivityCollected == null) {
        break missingId;
      }

      id = R.id.imageViewActivityPoster;
      ImageView imageViewActivityPoster = ViewBindings.findChildViewById(rootView, id);
      if (imageViewActivityPoster == null) {
        break missingId;
      }

      LinearLayout linearLayoutCalendar = (LinearLayout) rootView;

      id = R.id.textViewActivityEpisode;
      TextView textViewActivityEpisode = ViewBindings.findChildViewById(rootView, id);
      if (textViewActivityEpisode == null) {
        break missingId;
      }

      id = R.id.textViewActivityInfo;
      TextView textViewActivityInfo = ViewBindings.findChildViewById(rootView, id);
      if (textViewActivityInfo == null) {
        break missingId;
      }

      id = R.id.textViewActivityShow;
      TextView textViewActivityShow = ViewBindings.findChildViewById(rootView, id);
      if (textViewActivityShow == null) {
        break missingId;
      }

      id = R.id.textViewActivityTimestamp;
      TextView textViewActivityTimestamp = ViewBindings.findChildViewById(rootView, id);
      if (textViewActivityTimestamp == null) {
        break missingId;
      }

      id = R.id.textViewGridHeader;
      TextView textViewGridHeader = ViewBindings.findChildViewById(rootView, id);
      if (textViewGridHeader == null) {
        break missingId;
      }

      id = R.id.watchedBoxActivity;
      WatchedBox watchedBoxActivity = ViewBindings.findChildViewById(rootView, id);
      if (watchedBoxActivity == null) {
        break missingId;
      }

      return new ItemCalendarBinding((LinearLayout) rootView, cardViewActivity,
          constraintLayoutCalendar, imageViewActivityCollected, imageViewActivityPoster,
          linearLayoutCalendar, textViewActivityEpisode, textViewActivityInfo, textViewActivityShow,
          textViewActivityTimestamp, textViewGridHeader, watchedBoxActivity);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
